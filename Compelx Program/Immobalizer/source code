/*
* File:   IM_ECU.c
* Author: ak70047
*
* Created on September 24, 2022, 11:19 AM
*/
// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 20000000
void can_read();
char VAL;
char can_rx[11];
int flag = 0;
void system_init()
{
    GIE = 1;
    PEIE = 1;
}
void can_init()
{
    TRISBbits.RB2 = 0;//Setting the pin as output
    TRISBbits.RB3 = 1;//Setting the pin as input
    TRISDbits.RD4 = 0;//check led on or off(for direction for led purpos)
    PORTDbits.RD4=0;//condition checking led
    TRISDbits.RD0 = 0;//check led on or off(for direction for led purpos)
    PORTDbits.RD0 =0;//condition checking led
    IPR3bits.RXB0IP=1;//
    PIE3bits.RXB0IE=1;
}
void set_baud_rate()
{
    CANCON = 0x80;          //setting to configuration mode
    while(CANSTAT != 0x80); //checking status of configuration mode
    BRGCON1 = 0xC1;         //setting baud rate according to value @speed 250kbps
    BRGCON2 = 0xAE;
    BRGCON3 = 0x45;
     CANCON = 0x0E;         //setting to normal mode
}
void set_mask_filter()
{
    RXM0SIDH = 0x00;
    RXM0SIDL = 0x00;
    RXF0SIDH = 0x00; 
    RXF0SIDL = 0x00;
    RXB0CON=0x00;//
}

void __interrupt() ISR1 ()
{
    PORTDbits.RD4=1;
   //__delay_ms(2000);
    if(RX0IF==1)
    {
        RX0IF=0;
    for(int i=0;i<5000;++i);
    PORTDbits.RD4=0;
    can_read();
    }
}
void can_read()
{
   
    CANCON = 0x0E;
    can_rx[0] = RXB0D0;
    can_rx[1] = RXB0D1;
    can_rx[2] = RXB0D2;
    can_rx[3] = RXB0D3;
    can_rx[4] = RXB0D4;
    can_rx[5] = RXB0D5;
    can_rx[6] = RXB0D6;
    can_rx[7] = RXB0D7;
    can_rx[8] = RXB0DLC;
    can_rx[9] = RXB0SIDH;
    can_rx[10] = RXB0SIDL;
    RXB0CONbits.RXB0FUL = 0;
    flag = 1;
    
 }
void can_write1(char VAL)
{
   
    for(unsigned int i=0;i<5000;i++);
    CANCON = 0x08;
    
    //while(CANSTAT != 0x08);
    CIOCON = 0x20;
    TXB0SIDH = 0x00;
    TXB0SIDL = 0x08;
    TXB0EIDH = 0x09;
    TXB0EIDL = 0x32;
    TXB0DLC = 0x08;
    TXB0D0 = 0x00;
    TXB0D1 = 0x00;
    TXB0D2 = 0x00;
    TXB0D3 = VAL;
    TXB0D4 = 0x00;
    TXB0D5 = 0x00;
    TXB0D6 = 0x00;
    TXB0D7 = 0x00;
    TXB0CON = 0x08;
}
/*void can_write2()
{
   
    for(unsigned int i=0;i<5000;i++);
    CANCON = 0x08;
    
    //while(CANSTAT != 0x08);
    CIOCON = 0x20;
    TXB0SIDH = 0x00;
    TXB0SIDL = 0x08;
    TXB0EIDH = 0x09;
    TXB0EIDL = 0x32;
    TXB0DLC = 0x08;
    TXB0D0 = 0x00;
    TXB0D1 = 0x00;
    TXB0D2 = 0x00;
    TXB0D3 = 0x01;
    TXB0D4 = 0x00;
    TXB0D5 = 0x00;
    TXB0D6 = 0x00;
    TXB0D7 = 0x00;
    TXB0CON = 0x08;
    
}*/


int main()
{
    system_init();
    can_init();
    set_baud_rate();
    set_mask_filter();
     while(1)
    {
         if((can_rx[3]==0xAA)&& (can_rx[4]==0xAA) && (can_rx[5]==0xAA) && (can_rx[6]==0xAA) && (can_rx[7]==0xAA))
         {
             PORTDbits.RD0 = 1;
             for(int i=0;i<2000;++i);
             can_write1(0x01);
         }
         else
         {
             PORTDbits.RD0 = 0;
             for(int i=0;i<2000;++i); 
             can_write1(0x00);
         }
    }
    
}



